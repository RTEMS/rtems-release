#! /bin/sh
#
# RTEMS Tools Project (http://www.rtems.org/)
# Copyright 2015,2016,2019,2020 Chris Johns (chrisj@rtems.org)
# All rights reserved.
#
# This file is part of the RTEMS Tools package in 'rtems-tools'.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

set -e

#
# This is the top level RTEMS release script. Supply the version and and the
# release.
#
. ./rtems-release-version
echo "RTEMS Release, v${rtems_release_version}"

#
# Global release top path.
#
export release_top=${PWD}

#
# Defaults.
#
. ${release_top}/rtems-release-defaults

#
# We need pandoc so generate an error early is not available.
#
if [ ! $(command -v pandoc) ]; then
 echo "error: pandoc not found, please install" >&2
 exit 1
fi

#
#
# Usage for this tool.
#
usage() {
 echo "Usage: $0 [-u RSB-URL] version revision" 1>&2
 echo " where:" 1>&2
 echo "  version      : The version of RTEMS, eg 5" 1>&2
 echo "  revision     : The revision, eg 0.0 or 0.0-myrev" 1>&2
 echo "  -u [RSB-URL] : The primary download path the RSB uses (for testing)." 1>&2
 exit 1
}

#
# Option defaults
#
release_url=${rtems_release_url}

#
# Manage the command line.
#
while getopts ":u:" opt; do
 case "${opt}" in
  u)
   release_url=${OPTARG}
   ;;
  *)
   usage
   ;;
 esac
done
shift $((OPTIND-1))

if [ $# -ne 2 ]; then
 echo "error: 2 arguments must be supplied, version and revision. See -h for help"
 exit 1
fi
version=$1
revision=$2

release=${version}.${revision}

#
# Does the release provide release notes?
#
if [ -f rtems-notes-${version}.txt ]; then
 rtems_readme_release_notes=rtems-notes-${version}.txt
fi

#
# This call lets us have smaller lines in this script.
#
build()
{
 echo "Package: $1"
 ./rtems-release-package $*
}

#
# Clean the release directory away.
#
if [ -e ${release} ]; then
 echo "Removing existing release ${release}"
 rm -rf ${release}
 mkdir ${release}
fi

#
# Package the RSB, must be before the kernel. The kernel worker script uses the
# RSB to create autoconf and automake so it can bootstrap the kernel.
#
build rtems-source-builder ${version} ${revision} ${release_url}
build rtems-tools          ${version} ${revision} ${release_url}
build rtems                ${version} ${revision} ${release_url} rtems-release-kernel
if [ ${rtems_libbsd} = yes ]; then
 build rtems-libbsd ${version} ${revision} ${release_url}
fi
build rtems-source-builder ${version} ${revision} ${release_url} rtems-release-rsb-version
if [ ${rtems_examples} = yes ]; then
 if [ ${version} -lt 5 ]; then
  build examples-v2 ${version} ${revision} ${release_url}
  # Hack around the repo naming.
  mv ${release}/examples-v2-${release}.tar.${comp_ext} \
     ${release}/rtems-examples-v2-${release}.tar.${comp_ext}
 else
  build rtems-examples ${version} ${revision} ${release_url}
 fi
fi

#
# Documentation.
#
if [ ${rtems_docs} = yes ]; then
 ./rtems-release-docs rtems-docs ${version} ${revision} ${release_url}
fi

#
# Release notes.
#
if [ ${rtems_release_notes} = yes ]; then
 ./rtems-release-notes rtems-release-notes ${version} ${revision} ${release_url}
fi

#
# The sources is always last.
#
echo "Collect tools sources"
./rtems-release-sources ${version} ${revision} ${release_url}

#
# Make the contrib directory
#
mkdir -p ${release}/contrib/rtems-release

#
# Create the release information
#
echo "Create the release information"
. ${release_top}/rtems-release-info

#
#
# Copy these release scripts to a contrib directory.
#
for f in README.txt \
	 ${rtems_readme} \
	 rtems-mailer \
         rtems-release \
	 ${rtems_readme_release_notes} \
	 ${rtems_release_conf} \
	 rtems-release-cron \
	 rtems-release-docs \
	 rtems-release-defaults \
	 rtems-release-info \
	 rtems-release-kernel \
	 rtems-release-notes \
	 $(find rtems-release-notes-coverpage -type f) \
	 rtems-release-notes.css \
         rtems-release-package \
         rtems-release-package-end \
         rtems-release-package-start \
	 rtems-release-path \
	 rtems-release-rsb-version \
         rtems-release-sources \
	 rtems-release-tag \
	 rtems-release-version \
	 rtems-source-packages
do
 if [ ! -e $(dirname ${f}) ]; then
  mkdir -p $(dirname ${f})
 fi
 cp ${f} ${release}/contrib/rtems-release/
 csum=$(${checksum} -q ${f})
 echo "${csum} ${f}" >> ${release}/contrib/rtems-release/${checksum}sum.txt
done

#
# Checksum the top level.
#
cd ${release}
 rm -f ${checksum}sum.txt
 for f in $(ls -1)
 do
  if [ ! -d ${f} ]; then
   csum=$(${checksum} -q ${f})
   echo "${csum} ${f}" >> ${checksum}sum.txt
  fi
 done
 cd ..

exit 0
