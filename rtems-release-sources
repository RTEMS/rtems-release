#! /bin/sh
#
# RTEMS Tools Project (http://www.rtems.org/)
# Copyright 2015,2016,2019 Chris Johns (chrisj@rtems.org)
# All rights reserved.
#
# This file is part of the RTEMS Tools package in 'rtems-tools'.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

set -e

#
# The script collects the sources for all the tools.
#

#
# Defaults.
#
. ${release_top}/rtems-release-defaults

#
# The version and revision.
#
if [ $# -ne 3 ]; then
 echo "error: must be 3 arguments, the version, release and release URL."
 exit 1
fi
version=$1
revision=$2
release_url=$3

package=rtems-source-builder

. ${release_top}/rtems-release-package-lists
. ${release_top}/rtems-release-version

prefix=${package}-${release}

checksum=sha512

workspace=ws-${package}

echo "] RTEMS Release Sources, v${release}"
echo "] Package: ${package}"
echo "] Release: ${release}"

#
# Source the source packages to package (haha)
#
. rtems-source-packages

if [ ! -e ${release} ]; then
 mkdir ${release}
else
 if [ ! -d ${release} ]; then
  echo "error: ${release} exists and is not a directory."
  exit 1
 fi
fi

#
# Work in a package specific directory in the release directory.
#
cd ${release}
 rm -rf ${workspace}
 mkdir ${workspace}
cd ${workspace}

  echo "tar ${comp_tar}xf ../${prefix}.tar.${comp_ext}"
  tar ${comp_tar}xf ../${prefix}.tar.${comp_ext}

  #
  # Get the RSB to download the source we need to release. This is 100% of the
  # actual sourced used.
  #
  cd ${prefix}
   srcs="rtems bare"
   export_source=
   for src in ${srcs}
   do
    cd ${src}
     export_source="${export_source} ${src}"
     mkdir sources patches
     #
     # Fetch the source for RTEMS configs in the RSB.
     #
     # RTEMS 5 and later use the RSB's get source tool
     #
     if [ ${version} -lt 5 ]; then
      if [ ${src} = rtems ]; then
       pkgs=${rtems_pkgs}
      elif [ ${src} = base ]; then
       pkgs=${base_pkgs}
      fi
      echo "../source-builder/sb-set-builder --dry-run --with-download " \
           "--without-error-report --without-release-url " \
           "${pkgs}"
      ../source-builder/sb-set-builder --dry-run --with-download \
                                       --without-error-report \
                                       --without-release-url \
                                       ${pkgs}
     else
      echo "../source-builder/sb-get-sources "
      ../source-builder/sb-get-sources --stop-on-error
     fi
     #
     # Remove the top level packages because they do not have a VERSION file.
     #
     # These packages may or will be referencing git so remove those as well.
     #
     for p in ${top_packages}
     do
      rm -f $(find sources -name ${p}-\*.tar.\*)
      rm -rf sources/git/${p}.git
     done
     #
     # Remove the git, svn or cvs directory if empty.
     #
     for d in git svn cvs
     do
      if [ -e sources/${d} ]; then
       find sources/${d} -type d -empty -delete
      fi
     done
     #
     # If svn or cvs exist the release fails.
     #
     if [ -d sources/svn -o -d sources/cvs ]; then
      echo "error: ${release} contains repositories and cannot be released."
      exit 1
     fi
     #
     # If there are git repos create packages of them as they are.
     #
     if [ -d sources/git ]; then
      cd sources
       cd git
        for g in $(ls)
        do
         cd ${g}
          hash=$(git status | grep '^HEAD detached at ' | sed 's/^HEAD detached at //')
          prefix=$(echo ${g}-${hash} | sed 's/\./\-/')
          echo "] Packaging GIT repo: ${g} to ${prefix}"
          git archive --format=tar --prefix=${prefix}/ ${hash} | \
	      ${comp} > ../../${prefix}.tar.${comp_ext}
          cd ..  # ${g}
        done
        cd ..   # git
       rm -rf git
       cd ..   # source
     fi
     cd ..    # rtems
   done

   #
   # Export the sources and patches.
   #
   rm -rf ${top}/${release}/${sources}
   mkdir ${top}/${release}/${sources}
   for p in ${export_source}
   do
    cp ${p}/sources/* ${top}/${release}/${sources}/
    cp ${p}/patches/* ${top}/${release}/${sources}/
   done
   cd ..   # ${prefix}
  cd ..   # ${workspace}

  #
  # Copy in any source not present on the server. If these are not copied in
  # the RSB does not find them.
  #
  for p in ${top_packages}
  do
   f="${top}/${release}/${p}-${release}.tar.${comp_ext}"
   if [ -f $f ]; then
    mv $f ${top}/${release}/${sources}/
   fi
  done
  f="${top}/${release}/rtems-${release}.tar.${comp_ext}"
  if [ -f $f ]; then
   mv $f ${top}/${release}/${sources}/
  fi

  rm -rf ${workspace}

  #
  # Remove any copies from the sources.
  #
  ls -1 ${sources}
  for p in $(ls -1 | grep ${sources}/rtems-*.tar.${comp_ext})
  do
   echo "] Removing ${p}"
   rm -f ${p}
  done
  for p in ${rtems_packages}
  do
   if [ -e ${p}-${release}.tar.${comp_ext} ]; then
    mv ${p}-${release}.tar.${comp_ext} ${sources}/${p}-${release}.tar.${comp_ext}
   fi
  done

  cd ${sources}
   rm -f ${checksum}sum.txt
   for f in $(ls -1)
   do
    if [ ! -d ${f} ]; then
     csum=$(${checksum} -q ${f})
     echo "${csum} ${f}" >> ${checksum}sum.txt
    fi
   done
   cd ..   # ${sources}
  cd ..   # ${release}

echo "] Created: ${release}/${sources}/${checksum}sum.txt"
echo "] Created: ${release}/${sources}"

exit 0
