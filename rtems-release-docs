#! /bin/sh
#
# RTEMS Tools Project (http://www.rtems.org/)
# Copyright 2015,2016,2019 Chris Johns (chrisj@rtems.org)
# All rights reserved.
#
# This file is part of the RTEMS Tools package in 'rtems-tools'.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

set -e

#
# This worker script to build the doco.
#
. ${release_top}/rtems-release-version
echo "RTEMS Documentation Release builder, v${rtems_release_version}"

#
# Defaults.
#
. ${release_top}/rtems-release-defaults

#
# Only build if sphinx-build is present on the system.
#
if [ "`command -v sphinx-build`"no = no ]; then
 if [ ${rtems_docs_required} = yes ]; then
  echo "error: cannot find sphinx to build documentation"
 else
  echo "warning: documentation not built"
 fi
 exit 0
fi

#
# Common package start.
#
. ./rtems-release-package-start

#
# The workspace pwd
#
ws_pwd=${PWD}

#
# Get the documentation, create the tarball and stamp.
#
echo "git clone ${git_remote} ${git_local}"
git clone ${git_remote} ${git_local}

cd ${git_local}
 echo "git fetch origin"
 git fetch origin
 # Get the remote branch. If the release branch is not found use master.
 remote_branch=$(git branch --remote | grep ${version} | tr -d "[:space:]")
 if [ -z "${remote_branch}" ]; then
  remote_branch="master"
 fi
 echo "git archive --format=tar --prefix=${prefix}/ ${remote_branch}"
 git archive --format=tar --prefix=${prefix}/ ${remote_branch} | \
     ${comp} > ../${prefix}-unstamped.tar.${comp_ext}
 cd ..

#
# Stamp the source and package
#
echo "tar ${comp_tar}xf ../${prefix}-unstamped.tar.${comp_ext}"
tar ${comp_tar}xf ${prefix}-unstamped.tar.${comp_ext}

cd ${prefix}
 #
 # This is a hack until I add support for the VERSION file created below.
 #
 echo "Creating VERSION: ${release}"
 if [ ${version} -lt 5 ]; then
   cat wscript | \
    sed -e "s/^version[[:space:]].*=.*$/version = '${release}'/g" > wscript.tmp
   rm -f wscript
   mv wscript.tmp wscript
 else
  echo "[version]" > VERSION
  echo "revision = ${release}" >> VERSION
  d=$(date +%e)
  case $d in
   1?) d=${d}th ;;
   *1) d=${d}st ;;
   *2) d=${d}nd ;;
   *3) d=${d}rd ;;
   *)  d=${d}th ;;
  esac
  now=$(date +"${d} %B %Y")
  echo "date = ${now}" >> VERSION
 fi
 cd ..

echo "tar cf - ${prefix}"
tar cf - ${prefix} | ${comp} > ../${prefix}.tar.${comp_ext}

echo "Created: ${release}/${prefix}.tar.${comp_ext}"

#
# Build the docs.
#
mkdir install
cd ${prefix}
 ./waf distclean configure --prefix=../install/${prefix} --pdf --singlehtml
 ./waf build install
 cd ..

#
# Package the docs, PDF first.
#
mkdir ${top}/${release}/${docs}
cd install
 echo "Creating DOC all rtems-${release}-docs-all.tar.${comp_ext}"
 tar cf - * | \
  ${comp} > ${top}/${release}/${docs}/rtems-${release}-docs-all.tar.${comp_ext}
 for p in $(find . -name \*.pdf)
 do
  manual=$(echo $(basename $p) | sed -e "s/\\..*//")
  base=$(dirname $p)
  #
  # Move the PDF out of the way.
  #
  echo "Creating PDF rtems-${release}-${manual}.pdf"
  mv $p ${top}/${release}/${docs}/rtems-${release}-${manual}.pdf
  #
  # Create the single html manual
  #
  echo "Creating SingleHTML rtems-${release}-${manual}.html.${comp_ext}"
  mv ${base}/${manual}.html ${base}/rtems-${release}-${manual}.html
  ${comp} ${base}/rtems-${release}-${manual}.html
  mv ${base}/rtems-${release}-${manual}.html.${comp_ext} ${top}/${release}/${docs}/.
  #
  # Tar the multi-page html and install.
  #
  echo "Creating HTML rtems-${release}-${manual}-html.tar.${comp_ext}"
  tar cf - ${base}/${manual} | \
      ${comp} > ${top}/${release}/${docs}/rtems-${release}-${manual}-html.tar.${comp_ext}
 done
 cd ..

#
# Comman package end.
#
. ${top}/rtems-release-package-end

cd ${release}/${docs}
 #
 # If doxygen information has been generate move it into the docs.
 #
 for p in ../rtems-${release}-doxygen.tar.${comp_ext}
 do
  if [ -e ${p} ]; then
    mv ${p} .
  fi
 done

 rm -f ${checksum}sum.txt
 for f in $(ls -1)
 do
  if [ ! -d ${f} ]; then
   csum=$(${checksum} -q ${f})
   echo "${csum} ${f}" >> ${checksum}sum.txt
  fi
 done
 cd ..

echo "Created: ${release}/${docs}/${checksum}sum.txt"
echo "Created: ${release}/${docs}"

exit 0
